// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -package psadm -destination mock_client.go
//

// Package psadm is a generated GoMock package.
package psadm

import (
	context "context"
	reflect "reflect"
	time "time"

	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
	gomock "go.uber.org/mock/gomock"
)

// MockssmClient is a mock of ssmClient interface.
type MockssmClient struct {
	ctrl     *gomock.Controller
	recorder *MockssmClientMockRecorder
}

// MockssmClientMockRecorder is the mock recorder for MockssmClient.
type MockssmClientMockRecorder struct {
	mock *MockssmClient
}

// NewMockssmClient creates a new mock instance.
func NewMockssmClient(ctrl *gomock.Controller) *MockssmClient {
	mock := &MockssmClient{ctrl: ctrl}
	mock.recorder = &MockssmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockssmClient) EXPECT() *MockssmClientMockRecorder {
	return m.recorder
}

// DescribeParameters mocks base method.
func (m *MockssmClient) DescribeParameters(arg0 context.Context, arg1 *ssm.DescribeParametersInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeParameters", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameters indicates an expected call of DescribeParameters.
func (mr *MockssmClientMockRecorder) DescribeParameters(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameters", reflect.TypeOf((*MockssmClient)(nil).DescribeParameters), varargs...)
}

// GetParameter mocks base method.
func (m *MockssmClient) GetParameter(arg0 context.Context, arg1 *ssm.GetParameterInput, arg2 ...func(*ssm.Options)) (*ssm.GetParameterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameter", varargs...)
	ret0, _ := ret[0].(*ssm.GetParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameter indicates an expected call of GetParameter.
func (mr *MockssmClientMockRecorder) GetParameter(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameter", reflect.TypeOf((*MockssmClient)(nil).GetParameter), varargs...)
}

// GetParameterHistory mocks base method.
func (m *MockssmClient) GetParameterHistory(arg0 context.Context, arg1 *ssm.GetParameterHistoryInput, arg2 ...func(*ssm.Options)) (*ssm.GetParameterHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameterHistory", varargs...)
	ret0, _ := ret[0].(*ssm.GetParameterHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameterHistory indicates an expected call of GetParameterHistory.
func (mr *MockssmClientMockRecorder) GetParameterHistory(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameterHistory", reflect.TypeOf((*MockssmClient)(nil).GetParameterHistory), varargs...)
}

// PutParameter mocks base method.
func (m *MockssmClient) PutParameter(arg0 context.Context, arg1 *ssm.PutParameterInput, arg2 ...func(*ssm.Options)) (*ssm.PutParameterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutParameter", varargs...)
	ret0, _ := ret[0].(*ssm.PutParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutParameter indicates an expected call of PutParameter.
func (mr *MockssmClientMockRecorder) PutParameter(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutParameter", reflect.TypeOf((*MockssmClient)(nil).PutParameter), varargs...)
}

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// GetParameter mocks base method.
func (m *Mockclient) GetParameter(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameter", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameter indicates an expected call of GetParameter.
func (mr *MockclientMockRecorder) GetParameter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameter", reflect.TypeOf((*Mockclient)(nil).GetParameter), arg0, arg1)
}

// GetParameterByTime mocks base method.
func (m *Mockclient) GetParameterByTime(arg0 context.Context, arg1 string, arg2 time.Time) (*Parameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameterByTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Parameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameterByTime indicates an expected call of GetParameterByTime.
func (mr *MockclientMockRecorder) GetParameterByTime(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameterByTime", reflect.TypeOf((*Mockclient)(nil).GetParameterByTime), arg0, arg1, arg2)
}

// GetParameterWithDescription mocks base method.
func (m *Mockclient) GetParameterWithDescription(arg0 context.Context, arg1 string) (*Parameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameterWithDescription", arg0, arg1)
	ret0, _ := ret[0].(*Parameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameterWithDescription indicates an expected call of GetParameterWithDescription.
func (mr *MockclientMockRecorder) GetParameterWithDescription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameterWithDescription", reflect.TypeOf((*Mockclient)(nil).GetParameterWithDescription), arg0, arg1)
}

// GetParametersByPath mocks base method.
func (m *Mockclient) GetParametersByPath(arg0 context.Context, arg1 string) ([]*Parameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParametersByPath", arg0, arg1)
	ret0, _ := ret[0].([]*Parameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParametersByPath indicates an expected call of GetParametersByPath.
func (mr *MockclientMockRecorder) GetParametersByPath(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersByPath", reflect.TypeOf((*Mockclient)(nil).GetParametersByPath), arg0, arg1)
}

// PutParameter mocks base method.
func (m *Mockclient) PutParameter(arg0 context.Context, arg1 *Parameter, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutParameter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutParameter indicates an expected call of PutParameter.
func (mr *MockclientMockRecorder) PutParameter(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutParameter", reflect.TypeOf((*Mockclient)(nil).PutParameter), arg0, arg1, arg2)
}
